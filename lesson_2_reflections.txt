What happens when you initialize a repository? Why do you need to do it?
	You initialize a respository to create the .git file which will contain the meta data of all your commit histories. You need to do this in order for git to store commits into the new repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	The staging area is where files are held and in process of being committed before an actual commit. The working directory and repository have files that already have commits in the existing history. The staging area allows you to make on whether you want to add or delete files before making a commit.

How can you use the staging area to make sure you have one commit per logical
change?
	You can use git diff to see what change was made to the file while it's in the staging area before making a commit. Buy using just git diff without commit IDs, it shows what changes were recently made in the file since the last commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	When you want to experiment with your file or create a different language version, but not have those changes affect the master branch file. You can create a new branch that is separate from the master branch to make changes and experiment while not affect the master branch.

How do the diagrams help you visualize the branch structure?
	By making a diagram, you can visualize how commits in each branch connect to one another and from which commit it connects back to on the master branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?